#!/usr/bin/env bash
set -euo pipefail

if [ -n "${CIRCLECI+x}" ]; then
	REPO="$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"
	BRANCH="$CIRCLE_BRANCH"
	SHA="$CIRCLE_SHA1"
	BUILD="$CIRCLE_BUILD_NUM"
else
	echo "This script only works on CircleCI right now." >&2
	exit 1
fi

# Create ECR repository if it doesn't already exist.
echo "ensuring ECR repository exists with the right lifecycle policy" >&2
aws ecr describe-repositories \
	--region "$AWS_REGION" \
	--repository-name "$REPO" \
	>/dev/null 2>&1 \
	|| aws ecr create-repository \
	--region "$AWS_REGION" \
	--repository-name "$REPO" \
	--image-scanning-configuration scanOnPush=true

# Install the default ECR lifecycle policy.
aws ecr put-lifecycle-policy \
	--region "$AWS_REGION" \
	--repository-name "$REPO" \
	--lifecycle-policy-text "$(cat /default-ecr-lifecycle-policy.json)"

# Log in to Docker Hub
echo "logging in to Docker Hub" >&2
printenv DOCKER_PASS | docker login --username "$DOCKER_USER" --password-stdin

# Log in to ECR
echo "logging in to ECR" >&2
aws ecr get-login-password --region "$AWS_REGION" \
	| docker login --username AWS --password-stdin "$AWS_ECR_ACCOUNT_URL"

registries=("docker.io" "$AWS_ECR_ACCOUNT_URL")
branch_tag="$(echo -n "$BRANCH" | tr -c '[:alnum:]-._' '-')"
tags=("$SHA" "$branch_tag" "${branch_tag}-${BUILD}" latest)

# Run docker build
echo "running docker build" >&2
build_args=(
	"--build-arg" "GIT_COMMIT=${SHA}"
	"--build-arg" "GIT_BRANCH=${BRANCH}"
	"--platform" "${DOCKER_BUILD_PLATFORM:-linux/amd64}"
	"--push"
	"--cache-to" "type=inline" # remove this once ECR registry cache is supported (see below)
)
for registry in "${registries[@]}"; do
	for tag in "${tags[@]}"; do
		build_args+=("--tag" "${registry}/${REPO}:${tag}")
		# this does not work with ECR yet, relying on inline cache for now
		# https://github.com/aws/containers-roadmap/issues/876
		#build_args+=("--cache-to" "type=registry,ref=${registry}/${REPO}:${tag}")
		build_args+=("--cache-from" "type=registry,ref=${registry}/${REPO}:${tag}")
	done
done
set -x
docker buildx create --use --driver=docker-container
docker buildx build "${build_args[@]}" "$@" "${DOCKER_BUILD_PATH:-.}"
set +x
